// Code generated by sqlc-gen-ts-d1. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
//   sqlc-gen-ts-d1 v0.0.0-a@8167bad501f1a62189c947643578544091a1c292

import { D1Database, D1PreparedStatement, D1Result } from "@cloudflare/workers-types/experimental"
import { Account, Org } from "./models"

type Query<T> = {
  then(onFulfilled?: (value: T) => void, onRejected?: (reason?: any) => void): void;
  batch(): D1PreparedStatement;
}
const getAccountQuery = `-- name: GetAccount :one
SELECT pk, id, display_name, email
FROM account
WHERE id = ?1`;

export type GetAccountParams = {
  id: string;
};

export type GetAccountRow = {
  pk: number;
  id: string;
  displayName: string;
  email: string | null;
};

type RawGetAccountRow = {
  pk: number;
  id: string;
  display_name: string;
  email: string | null;
};

export function getAccount(
  d1: D1Database,
  args: GetAccountParams
): Query<GetAccountRow | null> {
  const ps = d1
    .prepare(getAccountQuery)
    .bind(args.id);
  return {
    then(onFulfilled?: (value: GetAccountRow | null) => void, onRejected?: (reason?: any) => void) {
      ps.first<RawGetAccountRow | null>()
      .then((raw: RawGetAccountRow | null) => raw ? {
        pk: raw.pk,
        id: raw.id,
        displayName: raw.display_name,
        email: raw.email,
      } : null)
      .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const listAccountsQuery = `-- name: ListAccounts :many
SELECT pk, id, display_name, email
FROM account`;

export type ListAccountsRow = {
  pk: number;
  id: string;
  displayName: string;
  email: string | null;
};

type RawListAccountsRow = {
  pk: number;
  id: string;
  display_name: string;
  email: string | null;
};

export function listAccounts(
  d1: D1Database
): Query<D1Result<ListAccountsRow>> {
  const ps = d1
    .prepare(listAccountsQuery);
  return {
    then(onFulfilled?: (value: D1Result<ListAccountsRow>) => void, onRejected?: (reason?: any) => void) {
      ps.all<RawListAccountsRow>()
       .then((r: D1Result<RawListAccountsRow>) => { return {
          ...r,
          results: r.results.map((raw: RawListAccountsRow) => { return {
            pk: raw.pk,
            id: raw.id,
            displayName: raw.display_name,
            email: raw.email,
          }}),
      }})
      .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const createAccountQuery = `-- name: CreateAccount :exec
INSERT INTO account (id, display_name, email)
VALUES (?1, ?2, ?3)`;

export type CreateAccountParams = {
  id: string;
  displayName: string;
  email: string | null;
};

export function createAccount(
  d1: D1Database,
  args: CreateAccountParams
): Query<D1Result> {
  const ps = d1
    .prepare(createAccountQuery)
    .bind(args.id, args.displayName, args.email);
  return {
    then(onFulfilled?: (value: D1Result) => void, onRejected?: (reason?: any) => void) {
      ps.run()
      .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const updateAccountDisplayNameQuery = `-- name: UpdateAccountDisplayName :one
UPDATE account
SET display_name = ?1
WHERE id = ?2
RETURNING pk, id, display_name, email`;

export type UpdateAccountDisplayNameParams = {
  displayName: string;
  id: string;
};

export type UpdateAccountDisplayNameRow = {
  pk: number;
  id: string;
  displayName: string;
  email: string | null;
};

type RawUpdateAccountDisplayNameRow = {
  pk: number;
  id: string;
  display_name: string;
  email: string | null;
};

export function updateAccountDisplayName(
  d1: D1Database,
  args: UpdateAccountDisplayNameParams
): Query<UpdateAccountDisplayNameRow | null> {
  const ps = d1
    .prepare(updateAccountDisplayNameQuery)
    .bind(args.displayName, args.id);
  return {
    then(onFulfilled?: (value: UpdateAccountDisplayNameRow | null) => void, onRejected?: (reason?: any) => void) {
      ps.first<RawUpdateAccountDisplayNameRow | null>()
      .then((raw: RawUpdateAccountDisplayNameRow | null) => raw ? {
        pk: raw.pk,
        id: raw.id,
        displayName: raw.display_name,
        email: raw.email,
      } : null)
      .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const deleteAccountQuery = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE id = ?1`;

export type DeleteAccountParams = {
  id: string;
};

export function deleteAccount(
  d1: D1Database,
  args: DeleteAccountParams
): Query<D1Result> {
  const ps = d1
    .prepare(deleteAccountQuery)
    .bind(args.id);
  return {
    then(onFulfilled?: (value: D1Result) => void, onRejected?: (reason?: any) => void) {
      ps.run()
      .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const createOrgQuery = `-- name: CreateOrg :exec
INSERT INTO org (id, display_name)
VALUES (?1, ?2)`;

export type CreateOrgParams = {
  id: string;
  displayName: string;
};

export function createOrg(
  d1: D1Database,
  args: CreateOrgParams
): Query<D1Result> {
  const ps = d1
    .prepare(createOrgQuery)
    .bind(args.id, args.displayName);
  return {
    then(onFulfilled?: (value: D1Result) => void, onRejected?: (reason?: any) => void) {
      ps.run()
      .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const createOrgAccountQuery = `-- name: CreateOrgAccount :exec
INSERT INTO org_account (org_pk, account_pk)
VALUES (?1, ?2)`;

export type CreateOrgAccountParams = {
  orgPk: number;
  accountPk: number;
};

export function createOrgAccount(
  d1: D1Database,
  args: CreateOrgAccountParams
): Query<D1Result> {
  const ps = d1
    .prepare(createOrgAccountQuery)
    .bind(args.orgPk, args.accountPk);
  return {
    then(onFulfilled?: (value: D1Result) => void, onRejected?: (reason?: any) => void) {
      ps.run()
      .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

const getOrgAccountQuery = `-- name: GetOrgAccount :one
SELECT account.pk AS account_pk, account.id AS account_id, account.display_name AS account_display_name, account.email AS account_email,
  org.pk AS org_pk, org.id AS org_id, org.display_name AS org_display_name
FROM account
  JOIN org_account ON account.pk = org_account.account_pk
  JOIN org ON org_account.org_pk = org.pk
WHERE org.id = ?1
  AND account.id = ?2`;

export type GetOrgAccountParams = {
  orgId: string;
  accountId: string;
};

export type GetOrgAccountRow = {
  account: Account;
  org: Org;
};

type RawGetOrgAccountRow = {
  account_pk: number;
  account_id: string;
  account_display_name: string;
  account_email: string | null;
  org_pk: number;
  org_id: string;
  org_display_name: string;
};

export function getOrgAccount(
  d1: D1Database,
  args: GetOrgAccountParams
): Query<GetOrgAccountRow | null> {
  const ps = d1
    .prepare(getOrgAccountQuery)
    .bind(args.orgId, args.accountId);
  return {
    then(onFulfilled?: (value: GetOrgAccountRow | null) => void, onRejected?: (reason?: any) => void) {
      ps.first<RawGetOrgAccountRow | null>()
      .then((raw: RawGetOrgAccountRow | null) => raw ? {
        // sqlc.embed(account)
        account: {
          pk: raw.account_pk,
          id: raw.account_id,
          displayName: raw.account_display_name,
          email: raw.account_email,
        },
        // sqlc.embed(org)
        org: {
          pk: raw.org_pk,
          id: raw.org_id,
          displayName: raw.org_display_name,
        },
      } : null)
      .then(onFulfilled).catch(onRejected);
    },
    batch() { return ps; },
  }
}

